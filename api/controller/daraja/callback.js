const moment = require('moment');
const paymentModel = require('../../model/ticket-payment.model');

exports.loadTransactionCallBack = async (req, res, next) => {
    /*This is triggered from Daraja API, as soon a transaction has been initialized*/
    try {
        console.log(JSON.stringify(req.body));
        let transactionStatusCode = req.body.Body.stkCallback.ResultCode;
        let deviceId = req.query.deviceId;
        let eventId = req.query.eventId;
        let admissionNumber = req.query.admissionNumber;


        if (!deviceId || !eventId || !admissionNumber) {
            return res.status(400).send({
                message: 'Missing Query Parameters',
                requestParameters: {
                    deviceId: '<The Device ID represents the Device token generated by the fcm client>',
                    eventId: '<Represents the unique id of particular events>',
                    admissionNumber: '<Admission number of the student making the payment>',
                    sampleUrl: {
                        callBackURL: 'https://{BASE_URL}/api/v1/process/callback?deviceId=183avcve&eventId=133r2wrr&admissionNumber=15-1005"'
                    }
                }
            })
        }

        switch (transactionStatusCode) {

            /*Handles the case for a successful transaction*/
            case 0:
                console.log("Transaction successful");
                await paymentModel.savePaymentTransaction(
                    admissionNumber,
                    eventId,
                    req.body.Body.stkCallback.CallbackMetadata.Item[1].Value,
                    req.body.Body.stkCallback.CallbackMetadata.Item[0].Value,
                    "Success",
                    moment().format(),
                    req.body.Body.stkCallback.CallbackMetadata.Item[4].Value,
                );
                break;

            /*Handles the case for cancelled transaction request*/
            case 1032:
                console.log("Transaction cancelled by the user");
                await paymentModel.recordFailedTransaction(
                    admissionNumber,
                    eventId,
                    req.body.Body.stkCallback.ResultDesc
                );
                break;

            /*Handles the case for insufficient balance*/
            case 1:
                console.log("Insufficient balance");
                await paymentModel.recordFailedTransaction(
                    admissionNumber,
                    eventId,
                    req.body.Body.stkCallback.ResultDesc
                );
                break;

            default:
                console.log("Transaction processing");
                break;
        }
        console.log(transactionStatusCode);
        var message = {
            "ResponseCode": "00000000",
            "ResponseDesc": "success"
        };

        res.status(200).send(message);
    } catch (e) {
        console.error(e.message);
        res.status(500).send({
            message: 'Internal Server Error',
            error: e.message
        })
    }
}